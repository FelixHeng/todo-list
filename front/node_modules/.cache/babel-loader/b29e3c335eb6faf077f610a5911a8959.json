{"ast":null,"code":"import _objectSpread from \"/home/wilder/Projects/todo/front/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/home/wilder/Projects/todo/front/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/wilder/Projects/todo/front/src/screens/AllTasks.js\";\nimport React, { useState, useEffect } from \"react\";\nimport TodoBar from \"../components/common/TodoBar\";\nimport TodoList from \"../components/TodoList\";\nimport TodoItem from \"../components/TodoItem\";\nimport Task from \"../components/Task\";\nimport { Link } from \"react-router-dom\";\nimport { Button, Grid, Checkbox, ListItemText, List, Box, makeStyles, IconButton } from \"@material-ui/core/\";\nimport axios from \"axios\";\n\nfunction AllTasks() {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        all = _useState2[0],\n        setAll = _useState2[1];\n\n  const _useState3 = useState(localStorage.getItem(\"id\")),\n        _useState4 = _slicedToArray(_useState3, 2),\n        userId = _useState4[0],\n        setUserId = _useState4[1];\n\n  const _useState5 = useState(localStorage.getItem(\"token\")),\n        _useState6 = _slicedToArray(_useState5, 2),\n        loggedIn = _useState6[0],\n        setLoggedIn = _useState6[1];\n\n  const useStyles = makeStyles({\n    category: {\n      // background: catColors,\n      border: 0,\n      borderRadius: 3,\n      boxShadow: \"0 3px 5px 2px rgba(255, 105, 135, .3)\",\n      color: \"white\",\n      pointerEvents: \"none\" // textTransform: \"none\"\n\n    }\n  });\n  const classes = useStyles();\n\n  const removeTodo = todoId => {\n    const updatedAll = all.filter(todo => todo.id !== todoId);\n    setAll(updatedAll);\n  };\n\n  const toggleTodo = todoId => {\n    const updatedAll = all.map(todo => todo.id === todoId ? _objectSpread({}, todo, {\n      completed: !todo.completed\n    }) : todo);\n    setAll(updatedAll);\n  };\n\n  const editTodo = (todoId, newTask, newCategory, newDate, newUserId) => {\n    const updatedAll = all.map(todo => todo.id === todoId ? _objectSpread({}, todo, {\n      task: newTask,\n      category: newCategory,\n      date: newDate,\n      userId: newUserId\n    }) : todo);\n    setAll(updatedAll);\n  };\n\n  useEffect(() => {\n    axios.get(`http://localhost:5000/todo/${userId}/all`).then(res => setAll(res.data), res => console.log(\"get res\", res.data));\n  }, []);\n  console.log(all);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, React.createElement(TodoBar, {\n    auth: loggedIn,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }), \"All your Tasks\", React.createElement(Button, {\n    component: Link,\n    to: \"/\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, \"Go back to Home\"), React.createElement(List, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, all.map(todo => React.createElement(Task, {\n    todos: all,\n    task: todo.task,\n    date: todo.todo_at,\n    category: todo.categories_id,\n    removeTodo: removeTodo,\n    toggleTodo: toggleTodo,\n    editTodo: editTodo,\n    id: todo.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  })), React.createElement(Grid, {\n    item: true,\n    xs: 10,\n    md: 8,\n    lg: 5,\n    style: {\n      marginTop: \"2rem\",\n      alignContent: \"center\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }))));\n}\n\nexport default AllTasks;","map":{"version":3,"sources":["/home/wilder/Projects/todo/front/src/screens/AllTasks.js"],"names":["React","useState","useEffect","TodoBar","TodoList","TodoItem","Task","Link","Button","Grid","Checkbox","ListItemText","List","Box","makeStyles","IconButton","axios","AllTasks","all","setAll","localStorage","getItem","userId","setUserId","loggedIn","setLoggedIn","useStyles","category","border","borderRadius","boxShadow","color","pointerEvents","classes","removeTodo","todoId","updatedAll","filter","todo","id","toggleTodo","map","completed","editTodo","newTask","newCategory","newDate","newUserId","task","date","get","then","res","data","console","log","todo_at","categories_id","marginTop","alignContent"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport TodoBar from \"../components/common/TodoBar\";\nimport TodoList from \"../components/TodoList\";\nimport TodoItem from \"../components/TodoItem\";\nimport Task from \"../components/Task\";\nimport { Link } from \"react-router-dom\";\nimport {\n  Button,\n  Grid,\n  Checkbox,\n  ListItemText,\n  List,\n  Box,\n  makeStyles,\n  IconButton\n} from \"@material-ui/core/\";\nimport axios from \"axios\";\n\nfunction AllTasks() {\n  const [all, setAll] = useState([]);\n  const [userId, setUserId] = useState(localStorage.getItem(\"id\"));\n  const [loggedIn, setLoggedIn] = useState(localStorage.getItem(\"token\"));\n\n  const useStyles = makeStyles({\n    category: {\n      // background: catColors,\n      border: 0,\n      borderRadius: 3,\n      boxShadow: \"0 3px 5px 2px rgba(255, 105, 135, .3)\",\n      color: \"white\",\n      pointerEvents: \"none\"\n      // textTransform: \"none\"\n    }\n  });\n  const classes = useStyles();\n\n  const removeTodo = todoId => {\n    const updatedAll = all.filter(todo => todo.id !== todoId);\n    setAll(updatedAll);\n  };\n\n  const toggleTodo = todoId => {\n    const updatedAll = all.map(todo =>\n      todo.id === todoId ? { ...todo, completed: !todo.completed } : todo\n    );\n    setAll(updatedAll);\n  };\n\n  const editTodo = (todoId, newTask, newCategory, newDate, newUserId) => {\n    const updatedAll = all.map(todo =>\n      todo.id === todoId\n        ? {\n            ...todo,\n            task: newTask,\n            category: newCategory,\n            date: newDate,\n            userId: newUserId\n          }\n        : todo\n    );\n    setAll(updatedAll);\n  };\n\n  useEffect(() => {\n    axios.get(`http://localhost:5000/todo/${userId}/all`).then(\n      res => setAll(res.data),\n      res => console.log(\"get res\", res.data)\n    );\n  }, []);\n  console.log(all);\n\n  return (\n    <div>\n      <TodoBar auth={loggedIn} />\n      All your Tasks\n      <Button component={Link} to={\"/\"}>\n        Go back to Home\n      </Button>\n      <List>\n        <div>\n          {all.map(todo => (\n            <Task\n              todos={all}\n              task={todo.task}\n              date={todo.todo_at}\n              category={todo.categories_id}\n              removeTodo={removeTodo}\n              toggleTodo={toggleTodo}\n              editTodo={editTodo}\n              id={todo.id}\n            />\n          ))}\n\n          <Grid\n            item\n            xs={10}\n            md={8}\n            lg={5}\n            style={{ marginTop: \"2rem\", alignContent: \"center\" }}\n          ></Grid>\n        </div>\n      </List>\n    </div>\n  );\n}\n\nexport default AllTasks;\n"]},"metadata":{},"sourceType":"module"}